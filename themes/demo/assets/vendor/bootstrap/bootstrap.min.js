/*! For license information please see bootstrap.min.js.LICENSE.txt */
(()=>{var t={577:function(t){t.exports=function(){"use strict";const t=1e6,e=1e3,i="transitionend",n=t=>null==t?`${t}`:{}.toString.call(t).match(/\s([a-z]+)/i)[1].toLowerCase(),s=e=>{do{e+=Math.floor(Math.random()*t)}while(document.getElementById(e));return e},o=t=>{let e=t.getAttribute("data-bs-target");if(!e||"#"===e){let i=t.getAttribute("href");if(!i||!i.includes("#")&&!i.startsWith("."))return null;i.includes("#")&&!i.startsWith("#")&&(i=`#${i.split("#")[1]}`),e=i&&"#"!==i?i.trim():null}return e},r=t=>{const e=o(t);return e&&document.querySelector(e)?e:null},a=t=>{const e=o(t);return e?document.querySelector(e):null},l=t=>{if(!t)return 0;let{transitionDuration:i,transitionDelay:n}=window.getComputedStyle(t);const s=Number.parseFloat(i),o=Number.parseFloat(n);return s||o?(i=i.split(",")[0],n=n.split(",")[0],(Number.parseFloat(i)+Number.parseFloat(n))*e):0},c=t=>{t.dispatchEvent(new Event(i))},h=t=>!(!t||"object"!=typeof t)&&(void 0!==t.jquery&&(t=t[0]),void 0!==t.nodeType),d=t=>h(t)?t.jquery?t[0]:t:"string"==typeof t&&t.length>0?document.querySelector(t):null,u=(t,e,i)=>{Object.keys(i).forEach((s=>{const o=i[s],r=e[s],a=r&&h(r)?"element":n(r);if(!new RegExp(o).test(a))throw new TypeError(`${t.toUpperCase()}: Option "${s}" provided type "${a}" but expected type "${o}".`)}))},f=t=>!(!h(t)||0===t.getClientRects().length)&&"visible"===getComputedStyle(t).getPropertyValue("visibility"),p=t=>!t||t.nodeType!==Node.ELEMENT_NODE||!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled")),g=t=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?g(t.parentNode):null},m=()=>{},_=t=>{t.offsetHeight},v=()=>{const{jQuery:t}=window;return t&&!document.body.hasAttribute("data-bs-no-jquery")?t:null},b=[],y=t=>{"loading"===document.readyState?(b.length||document.addEventListener("DOMContentLoaded",(()=>{b.forEach((t=>t()))})),b.push(t)):t()},w=()=>"rtl"===document.documentElement.dir,E=t=>{y((()=>{const e=v();if(e){const i=t.NAME,n=e.fn[i];e.fn[i]=t.jQueryInterface,e.fn[i].Constructor=t,e.fn[i].noConflict=()=>(e.fn[i]=n,t.jQueryInterface)}}))},A=t=>{"function"==typeof t&&t()},T=(t,e,n=!0)=>{if(!n)return void A(t);const s=5,o=l(e)+s;let r=!1;const a=({target:n})=>{n===e&&(r=!0,e.removeEventListener(i,a),A(t))};e.addEventListener(i,a),setTimeout((()=>{r||c(e)}),o)},O=(t,e,i,n)=>{let s=t.indexOf(e);if(-1===s)return t[!i&&n?t.length-1:0];const o=t.length;return s+=i?1:-1,n&&(s=(s+o)%o),t[Math.max(0,Math.min(s,o-1))]},C=/[^.]*(?=\..*)\.|.*/,k=/\..*/,L=/::\d+$/,x={};let $=1;const D={mouseenter:"mouseover",mouseleave:"mouseout"},S=/^(mouseenter|mouseleave)/i,N=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function I(t,e){return e&&`${e}::${$++}`||t.uidEvent||$++}function P(t){const e=I(t);return t.uidEvent=e,x[e]=x[e]||{},x[e]}function j(t,e){return function i(n){return n.delegateTarget=t,i.oneOff&&F.off(t,n.type,e),e.apply(t,[n])}}function M(t,e,i){return function n(s){const o=t.querySelectorAll(e);for(let{target:r}=s;r&&r!==this;r=r.parentNode)for(let a=o.length;a--;)if(o[a]===r)return s.delegateTarget=r,n.oneOff&&F.off(t,s.type,e,i),i.apply(r,[s]);return null}}function H(t,e,i=null){const n=Object.keys(t);for(let s=0,o=n.length;s<o;s++){const o=t[n[s]];if(o.originalHandler===e&&o.delegationSelector===i)return o}return null}function B(t,e,i){const n="string"==typeof e,s=n?i:e;let o=q(t);return N.has(o)||(o=t),[n,s,o]}function R(t,e,i,n,s){if("string"!=typeof e||!t)return;if(i||(i=n,n=null),S.test(e)){const t=t=>function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)};n?n=t(n):i=t(i)}const[o,r,a]=B(e,i,n),l=P(t),c=l[a]||(l[a]={}),h=H(c,r,o?i:null);if(h)return void(h.oneOff=h.oneOff&&s);const d=I(r,e.replace(C,"")),u=o?M(t,i,n):j(t,i);u.delegationSelector=o?i:null,u.originalHandler=r,u.oneOff=s,u.uidEvent=d,c[d]=u,t.addEventListener(a,u,o)}function W(t,e,i,n,s){const o=H(e[i],n,s);o&&(t.removeEventListener(i,o,Boolean(s)),delete e[i][o.uidEvent])}function z(t,e,i,n){const s=e[i]||{};Object.keys(s).forEach((o=>{if(o.includes(n)){const n=s[o];W(t,e,i,n.originalHandler,n.delegationSelector)}}))}function q(t){return t=t.replace(k,""),D[t]||t}const F={on(t,e,i,n){R(t,e,i,n,!1)},one(t,e,i,n){R(t,e,i,n,!0)},off(t,e,i,n){if("string"!=typeof e||!t)return;const[s,o,r]=B(e,i,n),a=r!==e,l=P(t),c=e.startsWith(".");if(void 0!==o){if(!l||!l[r])return;return void W(t,l,r,o,s?i:null)}c&&Object.keys(l).forEach((i=>{z(t,l,i,e.slice(1))}));const h=l[r]||{};Object.keys(h).forEach((i=>{const n=i.replace(L,"");if(!a||e.includes(n)){const e=h[i];W(t,l,r,e.originalHandler,e.delegationSelector)}}))},trigger(t,e,i){if("string"!=typeof e||!t)return null;const n=v(),s=q(e),o=e!==s,r=N.has(s);let a,l=!0,c=!0,h=!1,d=null;return o&&n&&(a=n.Event(e,i),n(t).trigger(a),l=!a.isPropagationStopped(),c=!a.isImmediatePropagationStopped(),h=a.isDefaultPrevented()),r?(d=document.createEvent("HTMLEvents"),d.initEvent(s,l,!0)):d=new CustomEvent(e,{bubbles:l,cancelable:!0}),void 0!==i&&Object.keys(i).forEach((t=>{Object.defineProperty(d,t,{get:()=>i[t]})})),h&&d.preventDefault(),c&&t.dispatchEvent(d),d.defaultPrevented&&void 0!==a&&a.preventDefault(),d}},U=new Map,V={set(t,e,i){U.has(t)||U.set(t,new Map);const n=U.get(t);n.has(e)||0===n.size?n.set(e,i):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(n.keys())[0]}.`)},get:(t,e)=>U.has(t)&&U.get(t).get(e)||null,remove(t,e){if(!U.has(t))return;const i=U.get(t);i.delete(e),0===i.size&&U.delete(t)}},K="5.1.3";class X{constructor(t){(t=d(t))&&(this._element=t,V.set(this._element,this.constructor.DATA_KEY,this))}dispose(){V.remove(this._element,this.constructor.DATA_KEY),F.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach((t=>{this[t]=null}))}_queueCallback(t,e,i=!0){T(t,e,i)}static getInstance(t){return V.get(d(t),this.DATA_KEY)}static getOrCreateInstance(t,e={}){return this.getInstance(t)||new this(t,"object"==typeof e?e:null)}static get VERSION(){return K}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}}const Y=(t,e="hide")=>{const i=`click.dismiss${t.EVENT_KEY}`,n=t.NAME;F.on(document,i,`[data-bs-dismiss="${n}"]`,(function(i){if(["A","AREA"].includes(this.tagName)&&i.preventDefault(),p(this))return;const s=a(this)||this.closest(`.${n}`);t.getOrCreateInstance(s)[e]()}))},Q="alert",G=".bs.alert",Z=`close${G}`,J=`closed${G}`,tt="fade",et="show";class it extends X{static get NAME(){return Q}close(){if(F.trigger(this._element,Z).defaultPrevented)return;this._element.classList.remove(et);const t=this._element.classList.contains(tt);this._queueCallback((()=>this._destroyElement()),this._element,t)}_destroyElement(){this._element.remove(),F.trigger(this._element,J),this.dispose()}static jQueryInterface(t){return this.each((function(){const e=it.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}Y(it,"close"),E(it);const nt="button",st="active",ot='[data-bs-toggle="button"]',rt="click.bs.button.data-api";class at extends X{static get NAME(){return nt}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle(st))}static jQueryInterface(t){return this.each((function(){const e=at.getOrCreateInstance(this);"toggle"===t&&e[t]()}))}}function lt(t){return"true"===t||"false"!==t&&(t===Number(t).toString()?Number(t):""===t||"null"===t?null:t)}function ct(t){return t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}F.on(document,rt,ot,(t=>{t.preventDefault();const e=t.target.closest(ot);at.getOrCreateInstance(e).toggle()})),E(at);const ht={setDataAttribute(t,e,i){t.setAttribute(`data-bs-${ct(e)}`,i)},removeDataAttribute(t,e){t.removeAttribute(`data-bs-${ct(e)}`)},getDataAttributes(t){if(!t)return{};const e={};return Object.keys(t.dataset).filter((t=>t.startsWith("bs"))).forEach((i=>{let n=i.replace(/^bs/,"");n=n.charAt(0).toLowerCase()+n.slice(1,n.length),e[n]=lt(t.dataset[i])})),e},getDataAttribute:(t,e)=>lt(t.getAttribute(`data-bs-${ct(e)}`)),offset(t){const e=t.getBoundingClientRect();return{top:e.top+window.pageYOffset,left:e.left+window.pageXOffset}},position:t=>({top:t.offsetTop,left:t.offsetLeft})},dt=3,ut={find:(t,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,t)),findOne:(t,e=document.documentElement)=>Element.prototype.querySelector.call(e,t),children:(t,e)=>[].concat(...t.children).filter((t=>t.matches(e))),parents(t,e){const i=[];let n=t.parentNode;for(;n&&n.nodeType===Node.ELEMENT_NODE&&n.nodeType!==dt;)n.matches(e)&&i.push(n),n=n.parentNode;return i},prev(t,e){let i=t.previousElementSibling;for(;i;){if(i.matches(e))return[i];i=i.previousElementSibling}return[]},next(t,e){let i=t.nextElementSibling;for(;i;){if(i.matches(e))return[i];i=i.nextElementSibling}return[]},focusableChildren(t){const e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((t=>`${t}:not([tabindex^="-"])`)).join(", ");return this.find(e,t).filter((t=>!p(t)&&f(t)))}},ft="carousel",pt=".bs.carousel",gt=".data-api",mt=500,_t=40,vt={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},bt={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},yt="next",wt="prev",Et="left",At="right",Tt={ArrowLeft:At,ArrowRight:Et},Ot=`slide${pt}`,Ct=`slid${pt}`,kt=`keydown${pt}`,Lt=`mouseenter${pt}`,xt=`mouseleave${pt}`,$t=`touchstart${pt}`,Dt=`touchmove${pt}`,St=`touchend${pt}`,Nt=`pointerdown${pt}`,It=`pointerup${pt}`,Pt=`dragstart${pt}`,jt=`load${pt}${gt}`,Mt=`click${pt}${gt}`,Ht="carousel",Bt="active",Rt="slide",Wt="carousel-item-end",zt="carousel-item-start",qt="carousel-item-next",Ft="carousel-item-prev",Ut="pointer-event",Vt=".active",Kt=".active.carousel-item",Xt=".carousel-item",Yt=".carousel-item img",Qt=".carousel-item-next, .carousel-item-prev",Gt=".carousel-indicators",Zt="[data-bs-target]",Jt="[data-bs-slide], [data-bs-slide-to]",te='[data-bs-ride="carousel"]',ee="touch",ie="pen";class ne extends X{constructor(t,e){super(t),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._indicatorsElement=ut.findOne(Gt,this._element),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent),this._addEventListeners()}static get Default(){return vt}static get NAME(){return ft}next(){this._slide(yt)}nextWhenVisible(){!document.hidden&&f(this._element)&&this.next()}prev(){this._slide(wt)}pause(t){t||(this._isPaused=!0),ut.findOne(Qt,this._element)&&(c(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}cycle(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}to(t){this._activeElement=ut.findOne(Kt,this._element);const e=this._getItemIndex(this._activeElement);if(t>this._items.length-1||t<0)return;if(this._isSliding)return void F.one(this._element,Ct,(()=>this.to(t)));if(e===t)return this.pause(),void this.cycle();const i=t>e?yt:wt;this._slide(i,this._items[t])}_getConfig(t){return t={...vt,...ht.getDataAttributes(this._element),..."object"==typeof t?t:{}},u(ft,t,bt),t}_handleSwipe(){const t=Math.abs(this.touchDeltaX);if(t<=_t)return;const e=t/this.touchDeltaX;this.touchDeltaX=0,e&&this._slide(e>0?At:Et)}_addEventListeners(){this._config.keyboard&&F.on(this._element,kt,(t=>this._keydown(t))),"hover"===this._config.pause&&(F.on(this._element,Lt,(t=>this.pause(t))),F.on(this._element,xt,(t=>this.cycle(t)))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}_addTouchEventListeners(){const t=t=>this._pointerEvent&&(t.pointerType===ie||t.pointerType===ee),e=e=>{t(e)?this.touchStartX=e.clientX:this._pointerEvent||(this.touchStartX=e.touches[0].clientX)},i=t=>{this.touchDeltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-this.touchStartX},n=e=>{t(e)&&(this.touchDeltaX=e.clientX-this.touchStartX),this._handleSwipe(),"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((t=>this.cycle(t)),mt+this._config.interval))};ut.find(Yt,this._element).forEach((t=>{F.on(t,Pt,(t=>t.preventDefault()))})),this._pointerEvent?(F.on(this._element,Nt,(t=>e(t))),F.on(this._element,It,(t=>n(t))),this._element.classList.add(Ut)):(F.on(this._element,$t,(t=>e(t))),F.on(this._element,Dt,(t=>i(t))),F.on(this._element,St,(t=>n(t))))}_keydown(t){if(/input|textarea/i.test(t.target.tagName))return;const e=Tt[t.key];e&&(t.preventDefault(),this._slide(e))}_getItemIndex(t){return this._items=t&&t.parentNode?ut.find(Xt,t.parentNode):[],this._items.indexOf(t)}_getItemByOrder(t,e){const i=t===yt;return O(this._items,e,i,this._config.wrap)}_triggerSlideEvent(t,e){const i=this._getItemIndex(t),n=this._getItemIndex(ut.findOne(Kt,this._element));return F.trigger(this._element,Ot,{relatedTarget:t,direction:e,from:n,to:i})}_setActiveIndicatorElement(t){if(this._indicatorsElement){const e=ut.findOne(Vt,this._indicatorsElement);e.classList.remove(Bt),e.removeAttribute("aria-current");const i=ut.find(Zt,this._indicatorsElement);for(let e=0;e<i.length;e++)if(Number.parseInt(i[e].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(t)){i[e].classList.add(Bt),i[e].setAttribute("aria-current","true");break}}}_updateInterval(){const t=this._activeElement||ut.findOne(Kt,this._element);if(!t)return;const e=Number.parseInt(t.getAttribute("data-bs-interval"),10);e?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=e):this._config.interval=this._config.defaultInterval||this._config.interval}_slide(t,e){const i=this._directionToOrder(t),n=ut.findOne(Kt,this._element),s=this._getItemIndex(n),o=e||this._getItemByOrder(i,n),r=this._getItemIndex(o),a=Boolean(this._interval),l=i===yt,c=l?zt:Wt,h=l?qt:Ft,d=this._orderToDirection(i);if(o&&o.classList.contains(Bt))return void(this._isSliding=!1);if(this._isSliding)return;if(this._triggerSlideEvent(o,d).defaultPrevented)return;if(!n||!o)return;this._isSliding=!0,a&&this.pause(),this._setActiveIndicatorElement(o),this._activeElement=o;const u=()=>{F.trigger(this._element,Ct,{relatedTarget:o,direction:d,from:s,to:r})};if(this._element.classList.contains(Rt)){o.classList.add(h),_(o),n.classList.add(c),o.classList.add(c);const t=()=>{o.classList.remove(c,h),o.classList.add(Bt),n.classList.remove(Bt,h,c),this._isSliding=!1,setTimeout(u,0)};this._queueCallback(t,n,!0)}else n.classList.remove(Bt),o.classList.add(Bt),this._isSliding=!1,u();a&&this.cycle()}_directionToOrder(t){return[At,Et].includes(t)?w()?t===Et?wt:yt:t===Et?yt:wt:t}_orderToDirection(t){return[yt,wt].includes(t)?w()?t===wt?Et:At:t===wt?At:Et:t}static carouselInterface(t,e){const i=ne.getOrCreateInstance(t,e);let{_config:n}=i;"object"==typeof e&&(n={...n,...e});const s="string"==typeof e?e:n.slide;if("number"==typeof e)i.to(e);else if("string"==typeof s){if(void 0===i[s])throw new TypeError(`No method named "${s}"`);i[s]()}else n.interval&&n.ride&&(i.pause(),i.cycle())}static jQueryInterface(t){return this.each((function(){ne.carouselInterface(this,t)}))}static dataApiClickHandler(t){const e=a(this);if(!e||!e.classList.contains(Ht))return;const i={...ht.getDataAttributes(e),...ht.getDataAttributes(this)},n=this.getAttribute("data-bs-slide-to");n&&(i.interval=!1),ne.carouselInterface(e,i),n&&ne.getInstance(e).to(n),t.preventDefault()}}F.on(document,Mt,Jt,ne.dataApiClickHandler),F.on(window,jt,(()=>{const t=ut.find(te);for(let e=0,i=t.length;e<i;e++)ne.carouselInterface(t[e],ne.getInstance(t[e]))})),E(ne);const se="collapse",oe="bs.collapse",re=`.${oe}`,ae={toggle:!0,parent:null},le={toggle:"boolean",parent:"(null|element)"},ce=`show${re}`,he=`shown${re}`,de=`hide${re}`,ue=`hidden${re}`,fe=`click${re}.data-api`,pe="show",ge="collapse",me="collapsing",_e="collapsed",ve=`:scope .${ge} .${ge}`,be="collapse-horizontal",ye="width",we="height",Ee=".collapse.show, .collapse.collapsing",Ae='[data-bs-toggle="collapse"]';class Te extends X{constructor(t,e){super(t),this._isTransitioning=!1,this._config=this._getConfig(e),this._triggerArray=[];const i=ut.find(Ae);for(let t=0,e=i.length;t<e;t++){const e=i[t],n=r(e),s=ut.find(n).filter((t=>t===this._element));null!==n&&s.length&&(this._selector=n,this._triggerArray.push(e))}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return ae}static get NAME(){return se}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let t,e=[];if(this._config.parent){const t=ut.find(ve,this._config.parent);e=ut.find(Ee,this._config.parent).filter((e=>!t.includes(e)))}const i=ut.findOne(this._selector);if(e.length){const n=e.find((t=>i!==t));if(t=n?Te.getInstance(n):null,t&&t._isTransitioning)return}if(F.trigger(this._element,ce).defaultPrevented)return;e.forEach((e=>{i!==e&&Te.getOrCreateInstance(e,{toggle:!1}).hide(),t||V.set(e,oe,null)}));const n=this._getDimension();this._element.classList.remove(ge),this._element.classList.add(me),this._element.style[n]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const s=()=>{this._isTransitioning=!1,this._element.classList.remove(me),this._element.classList.add(ge,pe),this._element.style[n]="",F.trigger(this._element,he)},o=`scroll${n[0].toUpperCase()+n.slice(1)}`;this._queueCallback(s,this._element,!0),this._element.style[n]=`${this._element[o]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(F.trigger(this._element,de).defaultPrevented)return;const t=this._getDimension();this._element.style[t]=`${this._element.getBoundingClientRect()[t]}px`,_(this._element),this._element.classList.add(me),this._element.classList.remove(ge,pe);const e=this._triggerArray.length;for(let t=0;t<e;t++){const e=this._triggerArray[t],i=a(e);i&&!this._isShown(i)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0;const i=()=>{this._isTransitioning=!1,this._element.classList.remove(me),this._element.classList.add(ge),F.trigger(this._element,ue)};this._element.style[t]="",this._queueCallback(i,this._element,!0)}_isShown(t=this._element){return t.classList.contains(pe)}_getConfig(t){return(t={...ae,...ht.getDataAttributes(this._element),...t}).toggle=Boolean(t.toggle),t.parent=d(t.parent),u(se,t,le),t}_getDimension(){return this._element.classList.contains(be)?ye:we}_initializeChildren(){if(!this._config.parent)return;const t=ut.find(ve,this._config.parent);ut.find(Ae,this._config.parent).filter((e=>!t.includes(e))).forEach((t=>{const e=a(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}))}_addAriaAndCollapsedClass(t,e){t.length&&t.forEach((t=>{e?t.classList.remove(_e):t.classList.add(_e),t.setAttribute("aria-expanded",e)}))}static jQueryInterface(t){return this.each((function(){const e={};"string"==typeof t&&/show|hide/.test(t)&&(e.toggle=!1);const i=Te.getOrCreateInstance(this,e);if("string"==typeof t){if(void 0===i[t])throw new TypeError(`No method named "${t}"`);i[t]()}}))}}F.on(document,fe,Ae,(function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();const e=r(this);ut.find(e).forEach((t=>{Te.getOrCreateInstance(t,{toggle:!1}).toggle()}))})),E(Te);var Oe="top",Ce="bottom",ke="right",Le="left",xe="auto",$e=[Oe,Ce,ke,Le],De="start",Se="end",Ne="clippingParents",Ie="viewport",Pe="popper",je="reference",Me=$e.reduce((function(t,e){return t.concat([e+"-"+De,e+"-"+Se])}),[]),He=[].concat($e,[xe]).reduce((function(t,e){return t.concat([e,e+"-"+De,e+"-"+Se])}),[]),Be="beforeRead",Re="read",We="afterRead",ze="beforeMain",qe="main",Fe="afterMain",Ue="beforeWrite",Ve="write",Ke="afterWrite",Xe=[Be,Re,We,ze,qe,Fe,Ue,Ve,Ke];function Ye(t){return t?(t.nodeName||"").toLowerCase():null}function Qe(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}function Ge(t){return t instanceof Qe(t).Element||t instanceof Element}function Ze(t){return t instanceof Qe(t).HTMLElement||t instanceof HTMLElement}function Je(t){return"undefined"!=typeof ShadowRoot&&(t instanceof Qe(t).ShadowRoot||t instanceof ShadowRoot)}function ti(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var i=e.styles[t]||{},n=e.attributes[t]||{},s=e.elements[t];Ze(s)&&Ye(s)&&(Object.assign(s.style,i),Object.keys(n).forEach((function(t){var e=n[t];!1===e?s.removeAttribute(t):s.setAttribute(t,!0===e?"":e)})))}))}function ei(t){var e=t.state,i={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,i.popper),e.styles=i,e.elements.arrow&&Object.assign(e.elements.arrow.style,i.arrow),function(){Object.keys(e.elements).forEach((function(t){var n=e.elements[t],s=e.attributes[t]||{},o=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:i[t]).reduce((function(t,e){return t[e]="",t}),{});Ze(n)&&Ye(n)&&(Object.assign(n.style,o),Object.keys(s).forEach((function(t){n.removeAttribute(t)})))}))}}const ii={name:"applyStyles",enabled:!0,phase:"write",fn:ti,effect:ei,requires:["computeStyles"]};function ni(t){return t.split("-")[0]}function si(t,e){var i=t.getBoundingClientRect(),n=1,s=1;return{width:i.width/n,height:i.height/s,top:i.top/s,right:i.right/n,bottom:i.bottom/s,left:i.left/n,x:i.left/n,y:i.top/s}}function oi(t){var e=si(t),i=t.offsetWidth,n=t.offsetHeight;return Math.abs(e.width-i)<=1&&(i=e.width),Math.abs(e.height-n)<=1&&(n=e.height),{x:t.offsetLeft,y:t.offsetTop,width:i,height:n}}function ri(t,e){var i=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(i&&Je(i)){var n=e;do{if(n&&t.isSameNode(n))return!0;n=n.parentNode||n.host}while(n)}return!1}function ai(t){return Qe(t).getComputedStyle(t)}function li(t){return["table","td","th"].indexOf(Ye(t))>=0}function ci(t){return((Ge(t)?t.ownerDocument:t.document)||window.document).documentElement}function hi(t){return"html"===Ye(t)?t:t.assignedSlot||t.parentNode||(Je(t)?t.host:null)||ci(t)}function di(t){return Ze(t)&&"fixed"!==ai(t).position?t.offsetParent:null}function ui(t){var e=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&Ze(t)&&"fixed"===ai(t).position)return null;for(var i=hi(t);Ze(i)&&["html","body"].indexOf(Ye(i))<0;){var n=ai(i);if("none"!==n.transform||"none"!==n.perspective||"paint"===n.contain||-1!==["transform","perspective"].indexOf(n.willChange)||e&&"filter"===n.willChange||e&&n.filter&&"none"!==n.filter)return i;i=i.parentNode}return null}function fi(t){for(var e=Qe(t),i=di(t);i&&li(i)&&"static"===ai(i).position;)i=di(i);return i&&("html"===Ye(i)||"body"===Ye(i)&&"static"===ai(i).position)?e:i||ui(t)||e}function pi(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}var gi=Math.max,mi=Math.min,_i=Math.round;function vi(t,e,i){return gi(t,mi(e,i))}function bi(){return{top:0,right:0,bottom:0,left:0}}function yi(t){return Object.assign({},bi(),t)}function wi(t,e){return e.reduce((function(e,i){return e[i]=t,e}),{})}var Ei=function(t,e){return yi("number"!=typeof(t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t)?t:wi(t,$e))};function Ai(t){var e,i=t.state,n=t.name,s=t.options,o=i.elements.arrow,r=i.modifiersData.popperOffsets,a=ni(i.placement),l=pi(a),c=[Le,ke].indexOf(a)>=0?"height":"width";if(o&&r){var h=Ei(s.padding,i),d=oi(o),u="y"===l?Oe:Le,f="y"===l?Ce:ke,p=i.rects.reference[c]+i.rects.reference[l]-r[l]-i.rects.popper[c],g=r[l]-i.rects.reference[l],m=fi(o),_=m?"y"===l?m.clientHeight||0:m.clientWidth||0:0,v=p/2-g/2,b=h[u],y=_-d[c]-h[f],w=_/2-d[c]/2+v,E=vi(b,w,y),A=l;i.modifiersData[n]=((e={})[A]=E,e.centerOffset=E-w,e)}}function Ti(t){var e=t.state,i=t.options.element,n=void 0===i?"[data-popper-arrow]":i;null!=n&&("string"!=typeof n||(n=e.elements.popper.querySelector(n)))&&ri(e.elements.popper,n)&&(e.elements.arrow=n)}const Oi={name:"arrow",enabled:!0,phase:"main",fn:Ai,effect:Ti,requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Ci(t){return t.split("-")[1]}var ki={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Li(t){var e=t.x,i=t.y,n=window.devicePixelRatio||1;return{x:_i(_i(e*n)/n)||0,y:_i(_i(i*n)/n)||0}}function xi(t){var e,i=t.popper,n=t.popperRect,s=t.placement,o=t.variation,r=t.offsets,a=t.position,l=t.gpuAcceleration,c=t.adaptive,h=t.roundOffsets,d=!0===h?Li(r):"function"==typeof h?h(r):r,u=d.x,f=void 0===u?0:u,p=d.y,g=void 0===p?0:p,m=r.hasOwnProperty("x"),_=r.hasOwnProperty("y"),v=Le,b=Oe,y=window;if(c){var w=fi(i),E="clientHeight",A="clientWidth";w===Qe(i)&&"static"!==ai(w=ci(i)).position&&"absolute"===a&&(E="scrollHeight",A="scrollWidth"),s!==Oe&&(s!==Le&&s!==ke||o!==Se)||(b=Ce,g-=w[E]-n.height,g*=l?1:-1),s!==Le&&(s!==Oe&&s!==Ce||o!==Se)||(v=ke,f-=w[A]-n.width,f*=l?1:-1)}var T,O=Object.assign({position:a},c&&ki);return l?Object.assign({},O,((T={})[b]=_?"0":"",T[v]=m?"0":"",T.transform=(y.devicePixelRatio||1)<=1?"translate("+f+"px, "+g+"px)":"translate3d("+f+"px, "+g+"px, 0)",T)):Object.assign({},O,((e={})[b]=_?g+"px":"",e[v]=m?f+"px":"",e.transform="",e))}function $i(t){var e=t.state,i=t.options,n=i.gpuAcceleration,s=void 0===n||n,o=i.adaptive,r=void 0===o||o,a=i.roundOffsets,l=void 0===a||a,c={placement:ni(e.placement),variation:Ci(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:s};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,xi(Object.assign({},c,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:r,roundOffsets:l})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,xi(Object.assign({},c,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})}const Di={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:$i,data:{}};var Si={passive:!0};function Ni(t){var e=t.state,i=t.instance,n=t.options,s=n.scroll,o=void 0===s||s,r=n.resize,a=void 0===r||r,l=Qe(e.elements.popper),c=[].concat(e.scrollParents.reference,e.scrollParents.popper);return o&&c.forEach((function(t){t.addEventListener("scroll",i.update,Si)})),a&&l.addEventListener("resize",i.update,Si),function(){o&&c.forEach((function(t){t.removeEventListener("scroll",i.update,Si)})),a&&l.removeEventListener("resize",i.update,Si)}}const Ii={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:Ni,data:{}};var Pi={left:"right",right:"left",bottom:"top",top:"bottom"};function ji(t){return t.replace(/left|right|bottom|top/g,(function(t){return Pi[t]}))}var Mi={start:"end",end:"start"};function Hi(t){return t.replace(/start|end/g,(function(t){return Mi[t]}))}function Bi(t){var e=Qe(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function Ri(t){return si(ci(t)).left+Bi(t).scrollLeft}function Wi(t){var e=Qe(t),i=ci(t),n=e.visualViewport,s=i.clientWidth,o=i.clientHeight,r=0,a=0;return n&&(s=n.width,o=n.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(r=n.offsetLeft,a=n.offsetTop)),{width:s,height:o,x:r+Ri(t),y:a}}function zi(t){var e,i=ci(t),n=Bi(t),s=null==(e=t.ownerDocument)?void 0:e.body,o=gi(i.scrollWidth,i.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),r=gi(i.scrollHeight,i.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),a=-n.scrollLeft+Ri(t),l=-n.scrollTop;return"rtl"===ai(s||i).direction&&(a+=gi(i.clientWidth,s?s.clientWidth:0)-o),{width:o,height:r,x:a,y:l}}function qi(t){var e=ai(t),i=e.overflow,n=e.overflowX,s=e.overflowY;return/auto|scroll|overlay|hidden/.test(i+s+n)}function Fi(t){return["html","body","#document"].indexOf(Ye(t))>=0?t.ownerDocument.body:Ze(t)&&qi(t)?t:Fi(hi(t))}function Ui(t,e){var i;void 0===e&&(e=[]);var n=Fi(t),s=n===(null==(i=t.ownerDocument)?void 0:i.body),o=Qe(n),r=s?[o].concat(o.visualViewport||[],qi(n)?n:[]):n,a=e.concat(r);return s?a:a.concat(Ui(hi(r)))}function Vi(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function Ki(t){var e=si(t);return e.top=e.top+t.clientTop,e.left=e.left+t.clientLeft,e.bottom=e.top+t.clientHeight,e.right=e.left+t.clientWidth,e.width=t.clientWidth,e.height=t.clientHeight,e.x=e.left,e.y=e.top,e}function Xi(t,e){return e===Ie?Vi(Wi(t)):Ze(e)?Ki(e):Vi(zi(ci(t)))}function Yi(t){var e=Ui(hi(t)),i=["absolute","fixed"].indexOf(ai(t).position)>=0&&Ze(t)?fi(t):t;return Ge(i)?e.filter((function(t){return Ge(t)&&ri(t,i)&&"body"!==Ye(t)})):[]}function Qi(t,e,i){var n="clippingParents"===e?Yi(t):[].concat(e),s=[].concat(n,[i]),o=s[0],r=s.reduce((function(e,i){var n=Xi(t,i);return e.top=gi(n.top,e.top),e.right=mi(n.right,e.right),e.bottom=mi(n.bottom,e.bottom),e.left=gi(n.left,e.left),e}),Xi(t,o));return r.width=r.right-r.left,r.height=r.bottom-r.top,r.x=r.left,r.y=r.top,r}function Gi(t){var e,i=t.reference,n=t.element,s=t.placement,o=s?ni(s):null,r=s?Ci(s):null,a=i.x+i.width/2-n.width/2,l=i.y+i.height/2-n.height/2;switch(o){case Oe:e={x:a,y:i.y-n.height};break;case Ce:e={x:a,y:i.y+i.height};break;case ke:e={x:i.x+i.width,y:l};break;case Le:e={x:i.x-n.width,y:l};break;default:e={x:i.x,y:i.y}}var c=o?pi(o):null;if(null!=c){var h="y"===c?"height":"width";switch(r){case De:e[c]=e[c]-(i[h]/2-n[h]/2);break;case Se:e[c]=e[c]+(i[h]/2-n[h]/2)}}return e}function Zi(t,e){void 0===e&&(e={});var i=e,n=i.placement,s=void 0===n?t.placement:n,o=i.boundary,r=void 0===o?Ne:o,a=i.rootBoundary,l=void 0===a?Ie:a,c=i.elementContext,h=void 0===c?Pe:c,d=i.altBoundary,u=void 0!==d&&d,f=i.padding,p=void 0===f?0:f,g=yi("number"!=typeof p?p:wi(p,$e)),m=h===Pe?je:Pe,_=t.rects.popper,v=t.elements[u?m:h],b=Qi(Ge(v)?v:v.contextElement||ci(t.elements.popper),r,l),y=si(t.elements.reference),w=Gi({reference:y,element:_,strategy:"absolute",placement:s}),E=Vi(Object.assign({},_,w)),A=h===Pe?E:y,T={top:b.top-A.top+g.top,bottom:A.bottom-b.bottom+g.bottom,left:b.left-A.left+g.left,right:A.right-b.right+g.right},O=t.modifiersData.offset;if(h===Pe&&O){var C=O[s];Object.keys(T).forEach((function(t){var e=[ke,Ce].indexOf(t)>=0?1:-1,i=[Oe,Ce].indexOf(t)>=0?"y":"x";T[t]+=C[i]*e}))}return T}function Ji(t,e){void 0===e&&(e={});var i=e,n=i.placement,s=i.boundary,o=i.rootBoundary,r=i.padding,a=i.flipVariations,l=i.allowedAutoPlacements,c=void 0===l?He:l,h=Ci(n),d=h?a?Me:Me.filter((function(t){return Ci(t)===h})):$e,u=d.filter((function(t){return c.indexOf(t)>=0}));0===u.length&&(u=d);var f=u.reduce((function(e,i){return e[i]=Zi(t,{placement:i,boundary:s,rootBoundary:o,padding:r})[ni(i)],e}),{});return Object.keys(f).sort((function(t,e){return f[t]-f[e]}))}function tn(t){if(ni(t)===xe)return[];var e=ji(t);return[Hi(t),e,Hi(e)]}function en(t){var e=t.state,i=t.options,n=t.name;if(!e.modifiersData[n]._skip){for(var s=i.mainAxis,o=void 0===s||s,r=i.altAxis,a=void 0===r||r,l=i.fallbackPlacements,c=i.padding,h=i.boundary,d=i.rootBoundary,u=i.altBoundary,f=i.flipVariations,p=void 0===f||f,g=i.allowedAutoPlacements,m=e.options.placement,_=ni(m),v=l||(_!==m&&p?tn(m):[ji(m)]),b=[m].concat(v).reduce((function(t,i){return t.concat(ni(i)===xe?Ji(e,{placement:i,boundary:h,rootBoundary:d,padding:c,flipVariations:p,allowedAutoPlacements:g}):i)}),[]),y=e.rects.reference,w=e.rects.popper,E=new Map,A=!0,T=b[0],O=0;O<b.length;O++){var C=b[O],k=ni(C),L=Ci(C)===De,x=[Oe,Ce].indexOf(k)>=0,$=x?"width":"height",D=Zi(e,{placement:C,boundary:h,rootBoundary:d,altBoundary:u,padding:c}),S=x?L?ke:Le:L?Ce:Oe;y[$]>w[$]&&(S=ji(S));var N=ji(S),I=[];if(o&&I.push(D[k]<=0),a&&I.push(D[S]<=0,D[N]<=0),I.every((function(t){return t}))){T=C,A=!1;break}E.set(C,I)}if(A)for(var P=function(t){var e=b.find((function(e){var i=E.get(e);if(i)return i.slice(0,t).every((function(t){return t}))}));if(e)return T=e,"break"},j=p?3:1;j>0&&"break"!==P(j);j--);e.placement!==T&&(e.modifiersData[n]._skip=!0,e.placement=T,e.reset=!0)}}const nn={name:"flip",enabled:!0,phase:"main",fn:en,requiresIfExists:["offset"],data:{_skip:!1}};function sn(t,e,i){return void 0===i&&(i={x:0,y:0}),{top:t.top-e.height-i.y,right:t.right-e.width+i.x,bottom:t.bottom-e.height+i.y,left:t.left-e.width-i.x}}function on(t){return[Oe,ke,Ce,Le].some((function(e){return t[e]>=0}))}function rn(t){var e=t.state,i=t.name,n=e.rects.reference,s=e.rects.popper,o=e.modifiersData.preventOverflow,r=Zi(e,{elementContext:"reference"}),a=Zi(e,{altBoundary:!0}),l=sn(r,n),c=sn(a,s,o),h=on(l),d=on(c);e.modifiersData[i]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:h,hasPopperEscaped:d},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":h,"data-popper-escaped":d})}const an={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:rn};function ln(t,e,i){var n=ni(t),s=[Le,Oe].indexOf(n)>=0?-1:1,o="function"==typeof i?i(Object.assign({},e,{placement:t})):i,r=o[0],a=o[1];return r=r||0,a=(a||0)*s,[Le,ke].indexOf(n)>=0?{x:a,y:r}:{x:r,y:a}}function cn(t){var e=t.state,i=t.options,n=t.name,s=i.offset,o=void 0===s?[0,0]:s,r=He.reduce((function(t,i){return t[i]=ln(i,e.rects,o),t}),{}),a=r[e.placement],l=a.x,c=a.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=l,e.modifiersData.popperOffsets.y+=c),e.modifiersData[n]=r}const hn={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:cn};function dn(t){var e=t.state,i=t.name;e.modifiersData[i]=Gi({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})}const un={name:"popperOffsets",enabled:!0,phase:"read",fn:dn,data:{}};function fn(t){return"x"===t?"y":"x"}function pn(t){var e=t.state,i=t.options,n=t.name,s=i.mainAxis,o=void 0===s||s,r=i.altAxis,a=void 0!==r&&r,l=i.boundary,c=i.rootBoundary,h=i.altBoundary,d=i.padding,u=i.tether,f=void 0===u||u,p=i.tetherOffset,g=void 0===p?0:p,m=Zi(e,{boundary:l,rootBoundary:c,padding:d,altBoundary:h}),_=ni(e.placement),v=Ci(e.placement),b=!v,y=pi(_),w=fn(y),E=e.modifiersData.popperOffsets,A=e.rects.reference,T=e.rects.popper,O="function"==typeof g?g(Object.assign({},e.rects,{placement:e.placement})):g,C={x:0,y:0};if(E){if(o||a){var k="y"===y?Oe:Le,L="y"===y?Ce:ke,x="y"===y?"height":"width",$=E[y],D=E[y]+m[k],S=E[y]-m[L],N=f?-T[x]/2:0,I=v===De?A[x]:T[x],P=v===De?-T[x]:-A[x],j=e.elements.arrow,M=f&&j?oi(j):{width:0,height:0},H=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:bi(),B=H[k],R=H[L],W=vi(0,A[x],M[x]),z=b?A[x]/2-N-W-B-O:I-W-B-O,q=b?-A[x]/2+N+W+R+O:P+W+R+O,F=e.elements.arrow&&fi(e.elements.arrow),U=F?"y"===y?F.clientTop||0:F.clientLeft||0:0,V=e.modifiersData.offset?e.modifiersData.offset[e.placement][y]:0,K=E[y]+z-V-U,X=E[y]+q-V;if(o){var Y=vi(f?mi(D,K):D,$,f?gi(S,X):S);E[y]=Y,C[y]=Y-$}if(a){var Q="x"===y?Oe:Le,G="x"===y?Ce:ke,Z=E[w],J=Z+m[Q],tt=Z-m[G],et=vi(f?mi(J,K):J,Z,f?gi(tt,X):tt);E[w]=et,C[w]=et-Z}}e.modifiersData[n]=C}}const gn={name:"preventOverflow",enabled:!0,phase:"main",fn:pn,requiresIfExists:["offset"]};function mn(t){return{scrollLeft:t.scrollLeft,scrollTop:t.scrollTop}}function _n(t){return t!==Qe(t)&&Ze(t)?mn(t):Bi(t)}function vn(t){var e=t.getBoundingClientRect(),i=e.width/t.offsetWidth||1,n=e.height/t.offsetHeight||1;return 1!==i||1!==n}function bn(t,e,i){void 0===i&&(i=!1);var n=Ze(e);Ze(e)&&vn(e);var s=ci(e),o=si(t),r={scrollLeft:0,scrollTop:0},a={x:0,y:0};return(n||!n&&!i)&&(("body"!==Ye(e)||qi(s))&&(r=_n(e)),Ze(e)?((a=si(e)).x+=e.clientLeft,a.y+=e.clientTop):s&&(a.x=Ri(s))),{x:o.left+r.scrollLeft-a.x,y:o.top+r.scrollTop-a.y,width:o.width,height:o.height}}function yn(t){var e=new Map,i=new Set,n=[];function s(t){i.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!i.has(t)){var n=e.get(t);n&&s(n)}})),n.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){i.has(t.name)||s(t)})),n}function wn(t){var e=yn(t);return Xe.reduce((function(t,i){return t.concat(e.filter((function(t){return t.phase===i})))}),[])}function En(t){var e;return function(){return e||(e=new Promise((function(i){Promise.resolve().then((function(){e=void 0,i(t())}))}))),e}}function An(t){var e=t.reduce((function(t,e){var i=t[e.name];return t[e.name]=i?Object.assign({},i,e,{options:Object.assign({},i.options,e.options),data:Object.assign({},i.data,e.data)}):e,t}),{});return Object.keys(e).map((function(t){return e[t]}))}var Tn={placement:"bottom",modifiers:[],strategy:"absolute"};function On(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function Cn(t){void 0===t&&(t={});var e=t,i=e.defaultModifiers,n=void 0===i?[]:i,s=e.defaultOptions,o=void 0===s?Tn:s;return function(t,e,i){void 0===i&&(i=o);var s={placement:"bottom",orderedModifiers:[],options:Object.assign({},Tn,o),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},r=[],a=!1,l={state:s,setOptions:function(i){var r="function"==typeof i?i(s.options):i;h(),s.options=Object.assign({},o,s.options,r),s.scrollParents={reference:Ge(t)?Ui(t):t.contextElement?Ui(t.contextElement):[],popper:Ui(e)};var a=wn(An([].concat(n,s.options.modifiers)));return s.orderedModifiers=a.filter((function(t){return t.enabled})),c(),l.update()},forceUpdate:function(){if(!a){var t=s.elements,e=t.reference,i=t.popper;if(On(e,i)){s.rects={reference:bn(e,fi(i),"fixed"===s.options.strategy),popper:oi(i)},s.reset=!1,s.placement=s.options.placement,s.orderedModifiers.forEach((function(t){return s.modifiersData[t.name]=Object.assign({},t.data)}));for(var n=0;n<s.orderedModifiers.length;n++)if(!0!==s.reset){var o=s.orderedModifiers[n],r=o.fn,c=o.options,h=void 0===c?{}:c,d=o.name;"function"==typeof r&&(s=r({state:s,options:h,name:d,instance:l})||s)}else s.reset=!1,n=-1}}},update:En((function(){return new Promise((function(t){l.forceUpdate(),t(s)}))})),destroy:function(){h(),a=!0}};if(!On(t,e))return l;function c(){s.orderedModifiers.forEach((function(t){var e=t.name,i=t.options,n=void 0===i?{}:i,o=t.effect;if("function"==typeof o){var a=o({state:s,name:e,instance:l,options:n}),c=function(){};r.push(a||c)}}))}function h(){r.forEach((function(t){return t()})),r=[]}return l.setOptions(i).then((function(t){!a&&i.onFirstUpdate&&i.onFirstUpdate(t)})),l}}var kn=Cn(),Ln=Cn({defaultModifiers:[Ii,un,Di,ii]}),xn=Cn({defaultModifiers:[Ii,un,Di,ii,hn,nn,gn,Oi,an]});const $n=Object.freeze({__proto__:null,popperGenerator:Cn,detectOverflow:Zi,createPopperBase:kn,createPopper:xn,createPopperLite:Ln,top:Oe,bottom:Ce,right:ke,left:Le,auto:xe,basePlacements:$e,start:De,end:Se,clippingParents:Ne,viewport:Ie,popper:Pe,reference:je,variationPlacements:Me,placements:He,beforeRead:Be,read:Re,afterRead:We,beforeMain:ze,main:qe,afterMain:Fe,beforeWrite:Ue,write:Ve,afterWrite:Ke,modifierPhases:Xe,applyStyles:ii,arrow:Oi,computeStyles:Di,eventListeners:Ii,flip:nn,hide:an,offset:hn,popperOffsets:un,preventOverflow:gn}),Dn="dropdown",Sn=".bs.dropdown",Nn=".data-api",In="Escape",Pn="Space",jn="Tab",Mn="ArrowUp",Hn="ArrowDown",Bn=2,Rn=new RegExp(`${Mn}|${Hn}|${In}`),Wn=`hide${Sn}`,zn=`hidden${Sn}`,qn=`show${Sn}`,Fn=`shown${Sn}`,Un=`click${Sn}${Nn}`,Vn=`keydown${Sn}${Nn}`,Kn=`keyup${Sn}${Nn}`,Xn="show",Yn="dropup",Qn="dropend",Gn="dropstart",Zn="navbar",Jn='[data-bs-toggle="dropdown"]',ts=".dropdown-menu",es=".navbar-nav",is=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",ns=w()?"top-end":"top-start",ss=w()?"top-start":"top-end",os=w()?"bottom-end":"bottom-start",rs=w()?"bottom-start":"bottom-end",as=w()?"left-start":"right-start",ls=w()?"right-start":"left-start",cs={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},hs={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class ds extends X{constructor(t,e){super(t),this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar()}static get Default(){return cs}static get DefaultType(){return hs}static get NAME(){return Dn}toggle(){return this._isShown()?this.hide():this.show()}show(){if(p(this._element)||this._isShown(this._menu))return;const t={relatedTarget:this._element};if(F.trigger(this._element,qn,t).defaultPrevented)return;const e=ds.getParentFromElement(this._element);this._inNavbar?ht.setDataAttribute(this._menu,"popper","none"):this._createPopper(e),"ontouchstart"in document.documentElement&&!e.closest(es)&&[].concat(...document.body.children).forEach((t=>F.on(t,"mouseover",m))),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(Xn),this._element.classList.add(Xn),F.trigger(this._element,Fn,t)}hide(){if(p(this._element)||!this._isShown(this._menu))return;const t={relatedTarget:this._element};this._completeHide(t)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(t){F.trigger(this._element,Wn,t).defaultPrevented||("ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>F.off(t,"mouseover",m))),this._popper&&this._popper.destroy(),this._menu.classList.remove(Xn),this._element.classList.remove(Xn),this._element.setAttribute("aria-expanded","false"),ht.removeDataAttribute(this._menu,"popper"),F.trigger(this._element,zn,t))}_getConfig(t){if(t={...this.constructor.Default,...ht.getDataAttributes(this._element),...t},u(Dn,t,this.constructor.DefaultType),"object"==typeof t.reference&&!h(t.reference)&&"function"!=typeof t.reference.getBoundingClientRect)throw new TypeError(`${Dn.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return t}_createPopper(t){if(void 0===$n)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=t:h(this._config.reference)?e=d(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const i=this._getPopperConfig(),n=i.modifiers.find((t=>"applyStyles"===t.name&&!1===t.enabled));this._popper=xn(e,this._menu,i),n&&ht.setDataAttribute(this._menu,"popper","static")}_isShown(t=this._element){return t.classList.contains(Xn)}_getMenuElement(){return ut.next(this._element,ts)[0]}_getPlacement(){const t=this._element.parentNode;if(t.classList.contains(Qn))return as;if(t.classList.contains(Gn))return ls;const e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains(Yn)?e?ss:ns:e?rs:os}_detectNavbar(){return null!==this._element.closest(`.${Zn}`)}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){const t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(t.modifiers=[{name:"applyStyles",enabled:!1}]),{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_selectMenuItem({key:t,target:e}){const i=ut.find(is,this._menu).filter(f);i.length&&O(i,e,t===Hn,!i.includes(e)).focus()}static jQueryInterface(t){return this.each((function(){const e=ds.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}static clearMenus(t){if(t&&(t.button===Bn||"keyup"===t.type&&t.key!==jn))return;const e=ut.find(Jn);for(let i=0,n=e.length;i<n;i++){const n=ds.getInstance(e[i]);if(!n||!1===n._config.autoClose)continue;if(!n._isShown())continue;const s={relatedTarget:n._element};if(t){const e=t.composedPath(),i=e.includes(n._menu);if(e.includes(n._element)||"inside"===n._config.autoClose&&!i||"outside"===n._config.autoClose&&i)continue;if(n._menu.contains(t.target)&&("keyup"===t.type&&t.key===jn||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;"click"===t.type&&(s.clickEvent=t)}n._completeHide(s)}}static getParentFromElement(t){return a(t)||t.parentNode}static dataApiKeydownHandler(t){if(/input|textarea/i.test(t.target.tagName)?t.key===Pn||t.key!==In&&(t.key!==Hn&&t.key!==Mn||t.target.closest(ts)):!Rn.test(t.key))return;const e=this.classList.contains(Xn);if(!e&&t.key===In)return;if(t.preventDefault(),t.stopPropagation(),p(this))return;const i=this.matches(Jn)?this:ut.prev(this,Jn)[0],n=ds.getOrCreateInstance(i);if(t.key!==In)return t.key===Mn||t.key===Hn?(e||n.show(),void n._selectMenuItem(t)):void(e&&t.key!==Pn||ds.clearMenus());n.hide()}}F.on(document,Vn,Jn,ds.dataApiKeydownHandler),F.on(document,Vn,ts,ds.dataApiKeydownHandler),F.on(document,Un,ds.clearMenus),F.on(document,Kn,ds.clearMenus),F.on(document,Un,Jn,(function(t){t.preventDefault(),ds.getOrCreateInstance(this).toggle()})),E(ds);const us=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",fs=".sticky-top";class ps{constructor(){this._element=document.body}getWidth(){const t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}hide(){const t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",(e=>e+t)),this._setElementAttributes(us,"paddingRight",(e=>e+t)),this._setElementAttributes(fs,"marginRight",(e=>e-t))}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(t,e,i){const n=this.getWidth(),s=t=>{if(t!==this._element&&window.innerWidth>t.clientWidth+n)return;this._saveInitialAttribute(t,e);const s=window.getComputedStyle(t)[e];t.style[e]=`${i(Number.parseFloat(s))}px`};this._applyManipulationCallback(t,s)}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(us,"paddingRight"),this._resetElementAttributes(fs,"marginRight")}_saveInitialAttribute(t,e){const i=t.style[e];i&&ht.setDataAttribute(t,e,i)}_resetElementAttributes(t,e){const i=t=>{const i=ht.getDataAttribute(t,e);void 0===i?t.style.removeProperty(e):(ht.removeDataAttribute(t,e),t.style[e]=i)};this._applyManipulationCallback(t,i)}_applyManipulationCallback(t,e){h(t)?e(t):ut.find(t,this._element).forEach(e)}isOverflowing(){return this.getWidth()>0}}const gs={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},ms={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},_s="backdrop",vs="fade",bs="show",ys=`mousedown.bs.${_s}`;class ws{constructor(t){this._config=this._getConfig(t),this._isAppended=!1,this._element=null}show(t){this._config.isVisible?(this._append(),this._config.isAnimated&&_(this._getElement()),this._getElement().classList.add(bs),this._emulateAnimation((()=>{A(t)}))):A(t)}hide(t){this._config.isVisible?(this._getElement().classList.remove(bs),this._emulateAnimation((()=>{this.dispose(),A(t)}))):A(t)}_getElement(){if(!this._element){const t=document.createElement("div");t.className=this._config.className,this._config.isAnimated&&t.classList.add(vs),this._element=t}return this._element}_getConfig(t){return(t={...gs,..."object"==typeof t?t:{}}).rootElement=d(t.rootElement),u(_s,t,ms),t}_append(){this._isAppended||(this._config.rootElement.append(this._getElement()),F.on(this._getElement(),ys,(()=>{A(this._config.clickCallback)})),this._isAppended=!0)}dispose(){this._isAppended&&(F.off(this._element,ys),this._element.remove(),this._isAppended=!1)}_emulateAnimation(t){T(t,this._getElement(),this._config.isAnimated)}}const Es={trapElement:null,autofocus:!0},As={trapElement:"element",autofocus:"boolean"},Ts="focustrap",Os=".bs.focustrap",Cs=`focusin${Os}`,ks=`keydown.tab${Os}`,Ls="Tab",xs="forward",$s="backward";class Ds{constructor(t){this._config=this._getConfig(t),this._isActive=!1,this._lastTabNavDirection=null}activate(){const{trapElement:t,autofocus:e}=this._config;this._isActive||(e&&t.focus(),F.off(document,Os),F.on(document,Cs,(t=>this._handleFocusin(t))),F.on(document,ks,(t=>this._handleKeydown(t))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,F.off(document,Os))}_handleFocusin(t){const{target:e}=t,{trapElement:i}=this._config;if(e===document||e===i||i.contains(e))return;const n=ut.focusableChildren(i);0===n.length?i.focus():this._lastTabNavDirection===$s?n[n.length-1].focus():n[0].focus()}_handleKeydown(t){t.key===Ls&&(this._lastTabNavDirection=t.shiftKey?$s:xs)}_getConfig(t){return t={...Es,..."object"==typeof t?t:{}},u(Ts,t,As),t}}const Ss="modal",Ns=".bs.modal",Is="Escape",Ps={backdrop:!0,keyboard:!0,focus:!0},js={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},Ms=`hide${Ns}`,Hs=`hidePrevented${Ns}`,Bs=`hidden${Ns}`,Rs=`show${Ns}`,Ws=`shown${Ns}`,zs=`resize${Ns}`,qs=`click.dismiss${Ns}`,Fs=`keydown.dismiss${Ns}`,Us=`mouseup.dismiss${Ns}`,Vs=`mousedown.dismiss${Ns}`,Ks=`click${Ns}.data-api`,Xs="modal-open",Ys="fade",Qs="show",Gs="modal-static",Zs=".modal.show",Js=".modal-dialog",to=".modal-body",eo='[data-bs-toggle="modal"]';class io extends X{constructor(t,e){super(t),this._config=this._getConfig(e),this._dialog=ut.findOne(Js,this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollBar=new ps}static get Default(){return Ps}static get NAME(){return Ss}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||this._isTransitioning||F.trigger(this._element,Rs,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(Xs),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),F.on(this._dialog,Vs,(()=>{F.one(this._element,Us,(t=>{t.target===this._element&&(this._ignoreBackdropClick=!0)}))})),this._showBackdrop((()=>this._showElement(t))))}hide(){if(!this._isShown||this._isTransitioning)return;if(F.trigger(this._element,Ms).defaultPrevented)return;this._isShown=!1;const t=this._isAnimated();t&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),this._focustrap.deactivate(),this._element.classList.remove(Qs),F.off(this._element,qs),F.off(this._dialog,Vs),this._queueCallback((()=>this._hideModal()),this._element,t)}dispose(){[window,this._dialog].forEach((t=>F.off(t,Ns))),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new ws({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Ds({trapElement:this._element})}_getConfig(t){return t={...Ps,...ht.getDataAttributes(this._element),..."object"==typeof t?t:{}},u(Ss,t,js),t}_showElement(t){const e=this._isAnimated(),i=ut.findOne(to,this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,i&&(i.scrollTop=0),e&&_(this._element),this._element.classList.add(Qs);const n=()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,F.trigger(this._element,Ws,{relatedTarget:t})};this._queueCallback(n,this._dialog,e)}_setEscapeEvent(){this._isShown?F.on(this._element,Fs,(t=>{this._config.keyboard&&t.key===Is?(t.preventDefault(),this.hide()):this._config.keyboard||t.key!==Is||this._triggerBackdropTransition()})):F.off(this._element,Fs)}_setResizeEvent(){this._isShown?F.on(window,zs,(()=>this._adjustDialog())):F.off(window,zs)}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Xs),this._resetAdjustments(),this._scrollBar.reset(),F.trigger(this._element,Bs)}))}_showBackdrop(t){F.on(this._element,qs,(t=>{this._ignoreBackdropClick?this._ignoreBackdropClick=!1:t.target===t.currentTarget&&(!0===this._config.backdrop?this.hide():"static"===this._config.backdrop&&this._triggerBackdropTransition())})),this._backdrop.show(t)}_isAnimated(){return this._element.classList.contains(Ys)}_triggerBackdropTransition(){if(F.trigger(this._element,Hs).defaultPrevented)return;const{classList:t,scrollHeight:e,style:i}=this._element,n=e>document.documentElement.clientHeight;!n&&"hidden"===i.overflowY||t.contains(Gs)||(n||(i.overflowY="hidden"),t.add(Gs),this._queueCallback((()=>{t.remove(Gs),n||this._queueCallback((()=>{i.overflowY=""}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),i=e>0;(!i&&t&&!w()||i&&!t&&w())&&(this._element.style.paddingLeft=`${e}px`),(i&&!t&&!w()||!i&&t&&w())&&(this._element.style.paddingRight=`${e}px`)}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,e){return this.each((function(){const i=io.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===i[t])throw new TypeError(`No method named "${t}"`);i[t](e)}}))}}F.on(document,Ks,eo,(function(t){const e=a(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),F.one(e,Rs,(t=>{t.defaultPrevented||F.one(e,Bs,(()=>{f(this)&&this.focus()}))}));const i=ut.findOne(Zs);i&&io.getInstance(i).hide(),io.getOrCreateInstance(e).toggle(this)})),Y(io),E(io);const no="offcanvas",so=".bs.offcanvas",oo=".data-api",ro=`load${so}${oo}`,ao="Escape",lo={backdrop:!0,keyboard:!0,scroll:!1},co={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},ho="show",uo="offcanvas-backdrop",fo=".offcanvas.show",po=`show${so}`,go=`shown${so}`,mo=`hide${so}`,_o=`hidden${so}`,vo=`click${so}${oo}`,bo=`keydown.dismiss${so}`,yo='[data-bs-toggle="offcanvas"]';class wo extends X{constructor(t,e){super(t),this._config=this._getConfig(e),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get NAME(){return no}static get Default(){return lo}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){if(this._isShown)return;if(F.trigger(this._element,po,{relatedTarget:t}).defaultPrevented)return;this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||(new ps).hide(),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(ho);const e=()=>{this._config.scroll||this._focustrap.activate(),F.trigger(this._element,go,{relatedTarget:t})};this._queueCallback(e,this._element,!0)}hide(){if(!this._isShown)return;if(F.trigger(this._element,mo).defaultPrevented)return;this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.remove(ho),this._backdrop.hide();const t=()=>{this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._element.style.visibility="hidden",this._config.scroll||(new ps).reset(),F.trigger(this._element,_o)};this._queueCallback(t,this._element,!0)}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_getConfig(t){return t={...lo,...ht.getDataAttributes(this._element),..."object"==typeof t?t:{}},u(no,t,co),t}_initializeBackDrop(){return new ws({className:uo,isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:()=>this.hide()})}_initializeFocusTrap(){return new Ds({trapElement:this._element})}_addEventListeners(){F.on(this._element,bo,(t=>{this._config.keyboard&&t.key===ao&&this.hide()}))}static jQueryInterface(t){return this.each((function(){const e=wo.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}F.on(document,vo,yo,(function(t){const e=a(this);if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),p(this))return;F.one(e,_o,(()=>{f(this)&&this.focus()}));const i=ut.findOne(fo);i&&i!==e&&wo.getInstance(i).hide(),wo.getOrCreateInstance(e).toggle(this)})),F.on(window,ro,(()=>ut.find(fo).forEach((t=>wo.getOrCreateInstance(t).show())))),Y(wo),E(wo);const Eo=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Ao=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,To=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Oo=(t,e)=>{const i=t.nodeName.toLowerCase();if(e.includes(i))return!Eo.has(i)||Boolean(Ao.test(t.nodeValue)||To.test(t.nodeValue));const n=e.filter((t=>t instanceof RegExp));for(let t=0,e=n.length;t<e;t++)if(n[t].test(i))return!0;return!1},Co={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};function ko(t,e,i){if(!t.length)return t;if(i&&"function"==typeof i)return i(t);const n=(new window.DOMParser).parseFromString(t,"text/html"),s=[].concat(...n.body.querySelectorAll("*"));for(let t=0,i=s.length;t<i;t++){const i=s[t],n=i.nodeName.toLowerCase();if(!Object.keys(e).includes(n)){i.remove();continue}const o=[].concat(...i.attributes),r=[].concat(e["*"]||[],e[n]||[]);o.forEach((t=>{Oo(t,r)||i.removeAttribute(t.nodeName)}))}return n.body.innerHTML}const Lo="tooltip",xo=".bs.tooltip",$o="bs-tooltip",Do=new Set(["sanitize","allowList","sanitizeFn"]),So={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},No={AUTO:"auto",TOP:"top",RIGHT:w()?"left":"right",BOTTOM:"bottom",LEFT:w()?"right":"left"},Io={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:Co,popperConfig:null},Po={HIDE:`hide${xo}`,HIDDEN:`hidden${xo}`,SHOW:`show${xo}`,SHOWN:`shown${xo}`,INSERTED:`inserted${xo}`,CLICK:`click${xo}`,FOCUSIN:`focusin${xo}`,FOCUSOUT:`focusout${xo}`,MOUSEENTER:`mouseenter${xo}`,MOUSELEAVE:`mouseleave${xo}`},jo="fade",Mo="show",Ho="show",Bo="out",Ro=".tooltip-inner",Wo=".modal",zo="hide.bs.modal",qo="hover",Fo="focus",Uo="click",Vo="manual";class Ko extends X{constructor(t,e){if(void 0===$n)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this._config=this._getConfig(e),this.tip=null,this._setListeners()}static get Default(){return Io}static get NAME(){return Lo}static get Event(){return Po}static get DefaultType(){return So}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(t){if(this._isEnabled)if(t){const e=this._initializeOnDelegatedTarget(t);e._activeTrigger.click=!e._activeTrigger.click,e._isWithActiveTrigger()?e._enter(null,e):e._leave(null,e)}else{if(this.getTipElement().classList.contains(Mo))return void this._leave(null,this);this._enter(null,this)}}dispose(){clearTimeout(this._timeout),F.off(this._element.closest(Wo),zo,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this.isWithContent()||!this._isEnabled)return;const t=F.trigger(this._element,this.constructor.Event.SHOW),e=g(this._element),i=null===e?this._element.ownerDocument.documentElement.contains(this._element):e.contains(this._element);if(t.defaultPrevented||!i)return;"tooltip"===this.constructor.NAME&&this.tip&&this.getTitle()!==this.tip.querySelector(Ro).innerHTML&&(this._disposePopper(),this.tip.remove(),this.tip=null);const n=this.getTipElement(),o=s(this.constructor.NAME);n.setAttribute("id",o),this._element.setAttribute("aria-describedby",o),this._config.animation&&n.classList.add(jo);const r="function"==typeof this._config.placement?this._config.placement.call(this,n,this._element):this._config.placement,a=this._getAttachment(r);this._addAttachmentClass(a);const{container:l}=this._config;V.set(n,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(l.append(n),F.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=xn(this._element,n,this._getPopperConfig(a)),n.classList.add(Mo);const c=this._resolvePossibleFunction(this._config.customClass);c&&n.classList.add(...c.split(" ")),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>{F.on(t,"mouseover",m)}));const h=()=>{const t=this._hoverState;this._hoverState=null,F.trigger(this._element,this.constructor.Event.SHOWN),t===Bo&&this._leave(null,this)},d=this.tip.classList.contains(jo);this._queueCallback(h,this.tip,d)}hide(){if(!this._popper)return;const t=this.getTipElement(),e=()=>{this._isWithActiveTrigger()||(this._hoverState!==Ho&&t.remove(),this._cleanTipClass(),this._element.removeAttribute("aria-describedby"),F.trigger(this._element,this.constructor.Event.HIDDEN),this._disposePopper())};if(F.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented)return;t.classList.remove(Mo),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>F.off(t,"mouseover",m))),this._activeTrigger[Uo]=!1,this._activeTrigger[Fo]=!1,this._activeTrigger[qo]=!1;const i=this.tip.classList.contains(jo);this._queueCallback(e,this.tip,i),this._hoverState=""}update(){null!==this._popper&&this._popper.update()}isWithContent(){return Boolean(this.getTitle())}getTipElement(){if(this.tip)return this.tip;const t=document.createElement("div");t.innerHTML=this._config.template;const e=t.children[0];return this.setContent(e),e.classList.remove(jo,Mo),this.tip=e,this.tip}setContent(t){this._sanitizeAndSetContent(t,this.getTitle(),Ro)}_sanitizeAndSetContent(t,e,i){const n=ut.findOne(i,t);e||!n?this.setElementContent(n,e):n.remove()}setElementContent(t,e){if(null!==t)return h(e)?(e=d(e),void(this._config.html?e.parentNode!==t&&(t.innerHTML="",t.append(e)):t.textContent=e.textContent)):void(this._config.html?(this._config.sanitize&&(e=ko(e,this._config.allowList,this._config.sanitizeFn)),t.innerHTML=e):t.textContent=e)}getTitle(){const t=this._element.getAttribute("data-bs-original-title")||this._config.title;return this._resolvePossibleFunction(t)}updateAttachment(t){return"right"===t?"end":"left"===t?"start":t}_initializeOnDelegatedTarget(t,e){return e||this.constructor.getOrCreateInstance(t.delegateTarget,this._getDelegateConfig())}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_resolvePossibleFunction(t){return"function"==typeof t?t.call(this._element):t}_getPopperConfig(t){const e={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:t=>this._handlePopperPlacementChange(t)}],onFirstUpdate:t=>{t.options.placement!==t.placement&&this._handlePopperPlacementChange(t)}};return{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_addAttachmentClass(t){this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(t)}`)}_getAttachment(t){return No[t.toUpperCase()]}_setListeners(){this._config.trigger.split(" ").forEach((t=>{if("click"===t)F.on(this._element,this.constructor.Event.CLICK,this._config.selector,(t=>this.toggle(t)));else if(t!==Vo){const e=t===qo?this.constructor.Event.MOUSEENTER:this.constructor.Event.FOCUSIN,i=t===qo?this.constructor.Event.MOUSELEAVE:this.constructor.Event.FOCUSOUT;F.on(this._element,e,this._config.selector,(t=>this._enter(t))),F.on(this._element,i,this._config.selector,(t=>this._leave(t)))}})),this._hideModalHandler=()=>{this._element&&this.hide()},F.on(this._element.closest(Wo),zo,this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const t=this._element.getAttribute("title"),e=typeof this._element.getAttribute("data-bs-original-title");(t||"string"!==e)&&(this._element.setAttribute("data-bs-original-title",t||""),!t||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",t),this._element.setAttribute("title",""))}_enter(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusin"===t.type?Fo:qo]=!0),e.getTipElement().classList.contains(Mo)||e._hoverState===Ho?e._hoverState=Ho:(clearTimeout(e._timeout),e._hoverState=Ho,e._config.delay&&e._config.delay.show?e._timeout=setTimeout((()=>{e._hoverState===Ho&&e.show()}),e._config.delay.show):e.show())}_leave(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusout"===t.type?Fo:qo]=e._element.contains(t.relatedTarget)),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=Bo,e._config.delay&&e._config.delay.hide?e._timeout=setTimeout((()=>{e._hoverState===Bo&&e.hide()}),e._config.delay.hide):e.hide())}_isWithActiveTrigger(){for(const t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1}_getConfig(t){const e=ht.getDataAttributes(this._element);return Object.keys(e).forEach((t=>{Do.has(t)&&delete e[t]})),(t={...this.constructor.Default,...e,..."object"==typeof t&&t?t:{}}).container=!1===t.container?document.body:d(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),u(Lo,t,this.constructor.DefaultType),t.sanitize&&(t.template=ko(t.template,t.allowList,t.sanitizeFn)),t}_getDelegateConfig(){const t={};for(const e in this._config)this.constructor.Default[e]!==this._config[e]&&(t[e]=this._config[e]);return t}_cleanTipClass(){const t=this.getTipElement(),e=new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`,"g"),i=t.getAttribute("class").match(e);null!==i&&i.length>0&&i.map((t=>t.trim())).forEach((e=>t.classList.remove(e)))}_getBasicClassPrefix(){return $o}_handlePopperPlacementChange(t){const{state:e}=t;e&&(this.tip=e.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(e.placement)))}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null)}static jQueryInterface(t){return this.each((function(){const e=Ko.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}E(Ko);const Xo="popover",Yo=".bs.popover",Qo="bs-popover",Go={...Ko.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},Zo={...Ko.DefaultType,content:"(string|element|function)"},Jo={HIDE:`hide${Yo}`,HIDDEN:`hidden${Yo}`,SHOW:`show${Yo}`,SHOWN:`shown${Yo}`,INSERTED:`inserted${Yo}`,CLICK:`click${Yo}`,FOCUSIN:`focusin${Yo}`,FOCUSOUT:`focusout${Yo}`,MOUSEENTER:`mouseenter${Yo}`,MOUSELEAVE:`mouseleave${Yo}`},tr=".popover-header",er=".popover-body";class ir extends Ko{static get Default(){return Go}static get NAME(){return Xo}static get Event(){return Jo}static get DefaultType(){return Zo}isWithContent(){return this.getTitle()||this._getContent()}setContent(t){this._sanitizeAndSetContent(t,this.getTitle(),tr),this._sanitizeAndSetContent(t,this._getContent(),er)}_getContent(){return this._resolvePossibleFunction(this._config.content)}_getBasicClassPrefix(){return Qo}static jQueryInterface(t){return this.each((function(){const e=ir.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}E(ir);const nr="scrollspy",sr=".bs.scrollspy",or={offset:10,method:"auto",target:""},rr={offset:"number",method:"string",target:"(string|element)"},ar=`activate${sr}`,lr=`scroll${sr}`,cr=`load${sr}.data-api`,hr="dropdown-item",dr="active",ur='[data-bs-spy="scroll"]',fr=".nav, .list-group",pr=".nav-link",gr=".nav-item",mr=".list-group-item",_r=`${pr}, ${mr}, .${hr}`,vr=".dropdown",br=".dropdown-toggle",yr="offset",wr="position";class Er extends X{constructor(t,e){super(t),this._scrollElement="BODY"===this._element.tagName?window:this._element,this._config=this._getConfig(e),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,F.on(this._scrollElement,lr,(()=>this._process())),this.refresh(),this._process()}static get Default(){return or}static get NAME(){return nr}refresh(){const t=this._scrollElement===this._scrollElement.window?yr:wr,e="auto"===this._config.method?t:this._config.method,i=e===wr?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),ut.find(_r,this._config.target).map((t=>{const n=r(t),s=n?ut.findOne(n):null;if(s){const t=s.getBoundingClientRect();if(t.width||t.height)return[ht[e](s).top+i,n]}return null})).filter((t=>t)).sort(((t,e)=>t[0]-e[0])).forEach((t=>{this._offsets.push(t[0]),this._targets.push(t[1])}))}dispose(){F.off(this._scrollElement,sr),super.dispose()}_getConfig(t){return(t={...or,...ht.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}}).target=d(t.target)||document.documentElement,u(nr,t,rr),t}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){const t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),i=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=i){const t=this._targets[this._targets.length-1];this._activeTarget!==t&&this._activate(t)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(let e=this._offsets.length;e--;)this._activeTarget!==this._targets[e]&&t>=this._offsets[e]&&(void 0===this._offsets[e+1]||t<this._offsets[e+1])&&this._activate(this._targets[e])}}_activate(t){this._activeTarget=t,this._clear();const e=_r.split(",").map((e=>`${e}[data-bs-target="${t}"],${e}[href="${t}"]`)),i=ut.findOne(e.join(","),this._config.target);i.classList.add(dr),i.classList.contains(hr)?ut.findOne(br,i.closest(vr)).classList.add(dr):ut.parents(i,fr).forEach((t=>{ut.prev(t,`${pr}, ${mr}`).forEach((t=>t.classList.add(dr))),ut.prev(t,gr).forEach((t=>{ut.children(t,pr).forEach((t=>t.classList.add(dr)))}))})),F.trigger(this._scrollElement,ar,{relatedTarget:t})}_clear(){ut.find(_r,this._config.target).filter((t=>t.classList.contains(dr))).forEach((t=>t.classList.remove(dr)))}static jQueryInterface(t){return this.each((function(){const e=Er.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}F.on(window,cr,(()=>{ut.find(ur).forEach((t=>new Er(t)))})),E(Er);const Ar="tab",Tr=".bs.tab",Or=`hide${Tr}`,Cr=`hidden${Tr}`,kr=`show${Tr}`,Lr=`shown${Tr}`,xr=`click${Tr}.data-api`,$r="dropdown-menu",Dr="active",Sr="fade",Nr="show",Ir=".dropdown",Pr=".nav, .list-group",jr=".active",Mr=":scope > li > .active",Hr='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',Br=".dropdown-toggle",Rr=":scope > .dropdown-menu .active";class Wr extends X{static get NAME(){return Ar}show(){if(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(Dr))return;let t;const e=a(this._element),i=this._element.closest(Pr);if(i){const e="UL"===i.nodeName||"OL"===i.nodeName?Mr:jr;t=ut.find(e,i),t=t[t.length-1]}const n=t?F.trigger(t,Or,{relatedTarget:this._element}):null;if(F.trigger(this._element,kr,{relatedTarget:t}).defaultPrevented||null!==n&&n.defaultPrevented)return;this._activate(this._element,i);const s=()=>{F.trigger(t,Cr,{relatedTarget:this._element}),F.trigger(this._element,Lr,{relatedTarget:t})};e?this._activate(e,e.parentNode,s):s()}_activate(t,e,i){const n=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?ut.children(e,jr):ut.find(Mr,e))[0],s=i&&n&&n.classList.contains(Sr),o=()=>this._transitionComplete(t,n,i);n&&s?(n.classList.remove(Nr),this._queueCallback(o,t,!0)):o()}_transitionComplete(t,e,i){if(e){e.classList.remove(Dr);const t=ut.findOne(Rr,e.parentNode);t&&t.classList.remove(Dr),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}t.classList.add(Dr),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),_(t),t.classList.contains(Sr)&&t.classList.add(Nr);let n=t.parentNode;if(n&&"LI"===n.nodeName&&(n=n.parentNode),n&&n.classList.contains($r)){const e=t.closest(Ir);e&&ut.find(Br,e).forEach((t=>t.classList.add(Dr))),t.setAttribute("aria-expanded",!0)}i&&i()}static jQueryInterface(t){return this.each((function(){const e=Wr.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}F.on(document,xr,Hr,(function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),p(this)||Wr.getOrCreateInstance(this).show()})),E(Wr);const zr="toast",qr=".bs.toast",Fr=`mouseover${qr}`,Ur=`mouseout${qr}`,Vr=`focusin${qr}`,Kr=`focusout${qr}`,Xr=`hide${qr}`,Yr=`hidden${qr}`,Qr=`show${qr}`,Gr=`shown${qr}`,Zr="fade",Jr="hide",ta="show",ea="showing",ia={animation:"boolean",autohide:"boolean",delay:"number"},na={animation:!0,autohide:!0,delay:5e3};class sa extends X{constructor(t,e){super(t),this._config=this._getConfig(e),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get DefaultType(){return ia}static get Default(){return na}static get NAME(){return zr}show(){if(F.trigger(this._element,Qr).defaultPrevented)return;this._clearTimeout(),this._config.animation&&this._element.classList.add(Zr);const t=()=>{this._element.classList.remove(ea),F.trigger(this._element,Gr),this._maybeScheduleHide()};this._element.classList.remove(Jr),_(this._element),this._element.classList.add(ta),this._element.classList.add(ea),this._queueCallback(t,this._element,this._config.animation)}hide(){if(!this._element.classList.contains(ta))return;if(F.trigger(this._element,Xr).defaultPrevented)return;const t=()=>{this._element.classList.add(Jr),this._element.classList.remove(ea),this._element.classList.remove(ta),F.trigger(this._element,Yr)};this._element.classList.add(ea),this._queueCallback(t,this._element,this._config.animation)}dispose(){this._clearTimeout(),this._element.classList.contains(ta)&&this._element.classList.remove(ta),super.dispose()}_getConfig(t){return t={...na,...ht.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}},u(zr,t,this.constructor.DefaultType),t}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e}if(e)return void this._clearTimeout();const i=t.relatedTarget;this._element===i||this._element.contains(i)||this._maybeScheduleHide()}_setListeners(){F.on(this._element,Fr,(t=>this._onInteraction(t,!0))),F.on(this._element,Ur,(t=>this._onInteraction(t,!1))),F.on(this._element,Vr,(t=>this._onInteraction(t,!0))),F.on(this._element,Kr,(t=>this._onInteraction(t,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(t){return this.each((function(){const e=sa.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}return Y(sa),E(sa),{Alert:it,Button:at,Carousel:ne,Collapse:Te,Dropdown:ds,Modal:io,Offcanvas:wo,Popover:ir,ScrollSpy:Er,Tab:Wr,Toast:sa,Tooltip:Ko}}()}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";i(577)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,